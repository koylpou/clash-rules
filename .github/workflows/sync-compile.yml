name: Sync and Compile Sing-Box Rules

on:
  push:
  schedule:
    - cron: '0 13 * * *'
  workflow_dispatch:
  
permissions:
  contents: write

env:
  SING_BOX_VERSION: 1.10.3

jobs:
  sync_and_compile:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout the repository
      uses: actions/checkout@v3

    - name: Set up Git user
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Install sing-box
      run: |
        curl -Lo sing-box.tar.gz https://github.com/SagerNet/sing-box/releases/download/v${SING_BOX_VERSION}/sing-box-${SING_BOX_VERSION}-linux-amd64.tar.gz
        tar -xzf sing-box.tar.gz
        chmod +x sing-box-${SING_BOX_VERSION}-linux-amd64/sing-box
        sudo mv sing-box-${SING_BOX_VERSION}-linux-amd64/sing-box /usr/local/bin/sing-box
        sing-box version

    - name: Fetch  Rules and format files
      run: |
        git remote add ruleset https://github.com/gaoyifan/china-operator-ip
        git fetch ruleset
        git checkout ruleset/ip-lists -- china.txt china6.txt
        cat china.txt china6.txt > formatted.txt
        jq -n --rawfile data formatted.txt '{"version": 2, "rules": [{"ip_cidr": [$data | split("\n") | .[] | select(length > 0)]}]}' > geoip-cn.json
        rm -f china.txt china6.txt formatted.txt
    
    - name: Download ruleset
      run: |
        curl -o geolocation-!cn.json https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/sing/geo/geosite/geolocation-!cn.json
        curl -o geosite-cn.json https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/sing/geo/geosite/cn.json
        curl -o geosite-category-companies@cn.json https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/sing/geo/geosite/category-companies@cn.json
        curl -o geosite-steam@cn.json https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/refs/heads/sing/geo/geosite/steam@cn.json
    
    - name: Combine rulesets and write to second-last-rule.json
      run: |
        jq -c '.rules[0].domain' geolocation-!cn.json > temp_geolocation-!cn_domain.json
        jq -c '.rules[0].domain_suffix' geolocation-!cn.json > temp_geolocation-!cn_domain_suffix.json
        jq -c '.rules[0].domain_regex' geolocation-!cn.json > temp_geolocation-!cn_domain_regex.json
        jq -c '.rules[0].domain_suffix' geosite-cn.json > temp_geosite-cn_domain_suffix.json
        jq -c '.rules[0].domain' geosite-category-companies@cn.json > temp_geosite-category-companies@cn_domain.json
        jq -c '.rules[0].domain_suffix' geosite-category-companies@cn.json > temp_geosite-category-companies@cn_domain_suffix.json
        jq -c '.rules[0].domain_regex' geosite-category-companies@cn.json > temp_geosite-category-companies@cn_domain_regex.json
        jq -c '.rules[0].domain' geosite-steam@cn.json > temp_geosite-steam@cn_domain.json
        jq -c '.rules[0].domain_suffix' geosite-steam@cn.json > temp_geosite-steam@cn_domain_suffix.json
        jq -c '.rules[0].ip_cidr' geoip-cn.json > temp_ip_cidr.json
        jq -n --slurpfile a geolocation-!cn.json --slurpfile b geosite-cn.json --slurpfile c geosite-category-companies@cn.json --slurpfile d geosite-steam@cn.json --slurpfile e geoip-cn.json '{
            version: 1,
            rules: [{
              type: "logical",
              mode: "and",
              rules: [
                {
                  domain: $a[0].rules[0].domain,
                  domain_suffix: $a[0].rules[0].domain_suffix,
                  domain_regex: $a[0].rules[0].domain_regex,
                  invert: true
                },
                {
                  domain: (($c[0].rules[0].domain | if type != "array" then [.[]] else . end) + ($d[0].rules[0].domain | if type != "array" then [.[]] else . end)),
                  domain_suffix: (($b[0].rules[0].domain_suffix | if type != "array" then [.[]] else . end) + ($c[0].rules[0].domain_suffix | if type != "array" then [.[]] else . end) + ($d[0].rules[0].domain_suffix | if type != "array" then [.[]] else . end)),
                  domain_regex: (($c[0].rules[0].domain_regex | if type != "array" then [.[]] else . end) + ($d[0].rules[0].domain_regex | if type != "array" then [.[]] else . end)),
                  ip_cidr: $e[0].rules[0].ip_cidr
                }
              ]
            }]
          }' > logical-route-direct.json
        jq -n --slurpfile a geolocation-!cn.json --slurpfile b geosite-cn.json --slurpfile c geosite-category-companies@cn.json --slurpfile d geosite-steam@cn.json '{
            version: 1,
            rules: [{
              type: "logical",
              mode: "and",
              rules: [
                {
                  domain: $a[0].rules[0].domain,
                  domain_suffix: $a[0].rules[0].domain_suffix,
                  domain_regex: $a[0].rules[0].domain_regex,
                  invert: true
                },
                {
                  domain: (($c[0].rules[0].domain | if type != "array" then [.[]] else . end) + ($d[0].rules[0].domain | if type != "array" then [.[]] else . end)),
                  domain_suffix: (($b[0].rules[0].domain_suffix | if type != "array" then [.[]] else . end) + ($c[0].rules[0].domain_suffix | if type != "array" then [.[]] else . end) + ($d[0].rules[0].domain_suffix | if type != "array" then [.[]] else . end)),
                  domain_regex: (($c[0].rules[0].domain_regex | if type != "array" then [.[]] else . end) + ($d[0].rules[0].domain_regex | if type != "array" then [.[]] else . end))
                }
              ]
            }]
          }' > logical-dns-direct.json
    
    - name: Compile Sing-Box Rules from ruleset
      run: |
        rm -rf sing-box sing-box-${SING_BOX_VERSION}-linux-amd64 sing-box.tar.gz
        find . -type f -name "*.srs" -exec rm -f {} \;
        find . -type f -name "*.json" -exec bash -c '
        srs_file="${1%.json}.srs"
        echo "Compiling: $1 to $srs_file"
        if ! sing-box rule-set compile --output "$srs_file" "$1"; then
          echo "Error compiling $1"
          exit 1
        fi
        ' _ {} \;
        git add .
        if git diff-index --quiet HEAD --; then
          echo "No changes to commit"
          echo "No updates needed"
        else
          git commit -m "Update compiled .srs files"
          git push
        fi
